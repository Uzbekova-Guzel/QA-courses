{
	"info": {
		"_postman_id": "41b104fd-bcfe-476b-91df-0227aba3d838",
		"name": "collections_homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Приходящий токен необходимо передать во все остальные запросы.\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "guzel",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwerty",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/login",
					"host": [
						"{{server}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"pm.test(\"1 Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"//2 Проверка структуры json в ответе\r",
							"pm.test(\"2 Test json structure\", () => {\r",
							"    pm.expect(jsonData).to.be.an('object')\r",
							"    .that.has.all.keys(\"person\",\"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\");\r",
							"    pm.expect(jsonData.person).to.be.an('object')\r",
							"    .that.has.all.keys(\"u_name\",\"u_age\", \"u_salary_1_5_year\");\r",
							"    pm.expect(jsonData.person.u_name).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.person.u_age).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.start_qa_salary).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"//2.1 воспользовалась генератором схемы json на сайте https://jsonschema.net/home\r",
							"pm.test(\"2.1 Test jsonSchema\", () => {\r",
							"    const schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\r",
							"            \"person\",\r",
							"            \"qa_salary_after_12_months\",\r",
							"            \"qa_salary_after_6_months\",\r",
							"            \"start_qa_salary\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"person\": {\r",
							"                \"type\": \"object\",\r",
							"                \"required\": [\r",
							"                    \"u_age\",\r",
							"                    \"u_name\",\r",
							"                    \"u_salary_1_5_year\"\r",
							"                ],\r",
							"                \"properties\": {\r",
							"                    \"u_age\": {\r",
							"                        \"type\": \"integer\",\r",
							"                    },\r",
							"                    \"u_name\": {\r",
							"                        \"type\": \"array\",\r",
							"                        \"additionalItems\": true,\r",
							"                        \"items\": {\r",
							"                            \"anyOf\": [\r",
							"                                {\r",
							"                                    \"type\": \"string\"\r",
							"                                },\r",
							"                                {\r",
							"                                    \"type\": \"integer\"\r",
							"                                }\r",
							"                            ]\r",
							"                        }\r",
							"                    },\r",
							"                    \"u_salary_1_5_year\": {\r",
							"                        \"type\": \"integer\"\r",
							"                    }\r",
							"                }\r",
							"            },\r",
							"            \"qa_salary_after_12_months\": {\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"qa_salary_after_6_months\": {\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"start_qa_salary\": {\r",
							"                \"type\": \"integer\"\r",
							"            }\r",
							"        }\r",
							"    };\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//3  В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"3 Check multiplier\", () => {\r",
							"    const req = JSON.parse(request.data)\r",
							"    const salary = parseInt(req.salary)\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(salary)\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary * 2)\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary * 2.9)\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary * 4)\r",
							"});\r",
							"\r",
							"\r",
							"//4  Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"postman.setEnvironmentVariable(\"salary\", jsonData.person.u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": \"29\",\r\n    \"salary\": \"100000\",\r\n    \"name\": \"Guzel\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server}}/user_info",
					"host": [
						"{{server}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"pm.test(\"1 Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"//2 Проверка структуры json в ответе\r",
							"pm.test(\"2 Test json structure\", () => {\r",
							"    pm.expect(jsonData).to.be.an('object')\r",
							"    .that.has.all.keys(\"age\",\"name\", \"salary\");\r",
							"    pm.expect(jsonData.age).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.salary).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"\r",
							"//3 В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"pm.test(\"3 Check multiplier\", () => {\r",
							"    let req = request.data;\r",
							"    let salary = parseInt(req.salary)\r",
							"    pm.expect(parseInt(jsonData.salary[0])).to.eql(salary);\r",
							"    pm.expect(parseInt(jsonData.salary[1])).to.eql(salary * 2);\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.eql(salary * 3);\r",
							"});\r",
							"\r",
							"\r",
							"//4 Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"4 Comparing array elements\", () => {\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(parseInt(jsonData.salary[1]));\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(jsonData.salary[0]);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Guzel",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/new_data",
					"host": [
						"{{server}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4_test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"pm.test(\"1 Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"//2 Проверка структуры json в ответе\r",
							"pm.test(\"2 Test json structure\", () => {\r",
							"    pm.expect(jsonData).to.be.an('object')\r",
							"    .that.has.all.keys(\"age\",\"daily_food\", \"daily_sleep\", \"name\");\r",
							"    pm.expect(jsonData.age).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.daily_food).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.daily_sleep).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"//3 В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент  'daily_food':weight * 0.012,'daily_sleep': weight * 2.5\r",
							"pm.test(\"3 Check multiplier\", () => {\r",
							"    let req = request.data;\r",
							"    let weight = parseInt(req.weight)\r",
							"    pm.expect(jsonData.daily_food).to.eql(weight * 0.012);\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(weight * 2.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "2",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "3",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Peshenka",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/test_pet_info",
					"host": [
						"{{server}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5_get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"pm.test(\"1 Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"//2 Проверка структуры json в ответе\r",
							"pm.test(\"2 Test json structure\", () => {\r",
							"    pm.expect(jsonData).to.be.an('object')\r",
							"    .that.has.all.keys(\"age\",\"family\", \"name\", \"salary\");\r",
							"    pm.expect(jsonData.age).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.salary).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.family).to.be.an(\"object\")\r",
							"    .that.has.all.keys(\"children\",\"u_salary_1_5_year\");\r",
							"    pm.expect(jsonData.family.children).to.be.an(\"array\");\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"\r",
							"//3 Проверить что значение поля name = значению переменной name из окружения\r",
							"pm.test(\"3 Compare value name\", () => {\r",
							"    let req = request.data;\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\r",
							"//4 Проверить что значение поля age в ответе соответствует отправленному в запросе значению поля age\r",
							"pm.test(\"4 Compare value age\", () => {\r",
							"    let req = request.data;\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Guzel",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/get_test_user",
					"host": [
						"{{server}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"const jsonData = pm.response.json();\r",
							"let min = 0;\r",
							"const max = jsonData.length //определяем длину массива\r",
							"curr_index = Math.floor(Math.random() * (max - min + 1)) + min;//получаем рандомное значение индекса массива\r",
							"curr_object = jsonData[curr_index];//получаем объект под данным индексом в массиве\r",
							"pm.environment.set(\"curr_code\", curr_object.Cur_ID);//передаем значение Cur_ID в окружение\r",
							"\r",
							"/* 2\r",
							"===============\r",
							"***\r",
							"1) получить список валют\r",
							"2) итерировать список валют\r",
							"3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"4) если возвращается 500 код, переходим к следующей итреации\r",
							"5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"6) если поле есть, пишем в консоль инфу про валюту в виде response\r",
							"7) переходим к следующей итерации\r",
							"*/\r",
							"\r",
							"let i = 0;\r",
							"while(i<jsonData.length){\r",
							"    let data = {\r",
							"        url: \"http://162.55.220.72:5005/curr_byn\",\r",
							"        method: \"POST\",\r",
							"        body: {\r",
							"          mode: 'formdata',\r",
							"          formdata: [\r",
							"            {key: \"auth_token\", value: pm.environment.get(\"token\"), disabled: false, description: {content:\"\", type:\"text/plain\"}},\r",
							"            {key: \"curr_code\", value: jsonData[i].Cur_ID, disabled: false, description: {content:\"\", type:\"text/plain\"}}\r",
							"        ]}\r",
							"    };\r",
							"    pm.sendRequest(data, function (err, res) {\r",
							"        if(res.code == 200 && res.json().hasOwnProperty(\"Cur_OfficialRate\")){\r",
							"            console.info(res.json());\r",
							"        }\r",
							"    });\r",
							"    i += 1;\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/currency",
					"host": [
						"{{server}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7_curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"pm.test(\"1 Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"//2 Проверка структуры json в ответе\r",
							"pm.test(\"2 Test json structure\", () => {\r",
							"    pm.expect(jsonData).to.be.an('object')\r",
							"    .that.has.all.keys(\"Cur_Abbreviation\",\"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\", \"Date\");\r",
							"    pm.expect(jsonData.Cur_Abbreviation).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.Cur_ID).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.Cur_Name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.Cur_OfficialRate).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.Cur_Scale).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.Date).to.be.a(\"string\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/curr_byn",
					"host": [
						"{{server}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}
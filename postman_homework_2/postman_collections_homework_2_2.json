{
	"info": {
		"_postman_id": "41b104fd-bcfe-476b-91df-0227aba3d838",
		"name": "collections_homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Приходящий токен необходимо передать во все остальные запросы.\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "guzel",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwerty",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/login",
					"host": [
						"{{server}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"pm.test(\"1 Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"//2 Проверка структуры json в ответе\r",
							"let schema = {\r",
							"\"type\": \"object\",\r",
							"\"required\": [\"person\", \"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"],\r",
							"\"properties\":{\r",
							"    \"person\":{\r",
							"        \"type\": \"object\",\r",
							"        \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"],\r",
							"        \"properties\": {\r",
							"            \"u_age\": {\"type\": \"integer\"},\r",
							"            \"u_name\": {\"type\": \"array\"},\r",
							"            \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"        }\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\"type\": \"integer\"},\r",
							"    \"qa_salary_after_6_months\": {\"type\": \"integer\"},\r",
							"    \"start_qa_salary\": {\"type\": \"integer\"}\r",
							"}\r",
							"};\r",
							"\r",
							"pm.test(\"2 Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"\r",
							"//3  В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let req = JSON.parse(request.data)\r",
							"let salary = parseInt(req.salary)\r",
							"\r",
							"pm.test(\"3.1 Check multiplier start_qa_salary\", () => {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(salary)});\r",
							"\r",
							"pm.test(\"3.2 Check multiplier qa_salary_after_6_months\", () => {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary * 2)});\r",
							"\r",
							"pm.test(\"3.3 Check multiplier qa_salary_after_12_months\", () => {    \r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(salary * 2.9)});\r",
							"\r",
							"pm.test(\"3.4 Check multiplier u_salary_1_5_year\", () => {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(salary * 4)});\r",
							"\r",
							"\r",
							"//4  Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"postman.setEnvironmentVariable(\"salary\", jsonData.person.u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\": \"29\",\r\n    \"salary\": \"100000\",\r\n    \"name\": \"Guzel\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server}}/user_info",
					"host": [
						"{{server}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"pm.test(\"1 Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"//2 Проверка структуры json в ответе\r",
							"let schema = {\r",
							"\"type\": \"object\",\r",
							"\"required\": [\"age\", \"name\", \"salary\"],\r",
							"\"properties\":{\r",
							"    \"age\": {\"type\": \"integer\"},\r",
							"    \"name\": {\"type\": \"string\"},\r",
							"    \"salary\": {\"type\": \"array\"}\r",
							"}\r",
							"};\r",
							"\r",
							"pm.test(\"2 Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"//3 В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let req = request.data;\r",
							"let salary = parseInt(req.salary)\r",
							"\r",
							"pm.test(\"3.1 Check multiplier salary[0]\", () => {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(salary)});\r",
							"\r",
							"pm.test(\"3.2 Check multiplier salary[1]\", () => {    \r",
							"    pm.expect(parseInt(jsonData.salary[1])).to.eql(salary * 2)});\r",
							"\r",
							"pm.test(\"3.3 Check multiplier salary[2]\", () => {\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.eql(salary * 3)});\r",
							"\r",
							"\r",
							"//4 Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"4.1 Comparing array elements salary[2]>salary[1]\", () => {\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(parseInt(jsonData.salary[1]))});\r",
							"\r",
							"pm.test(\"4.2 Comparing array elements salary[2]>salary[0]\", () => {\r",
							"    pm.expect(parseInt(jsonData.salary[2])).to.greaterThan(jsonData.salary[0]);});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "100000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Guzel",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/new_data",
					"host": [
						"{{server}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4_test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"pm.test(\"1 Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"//2 Проверка структуры json в ответе\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"age\", \"daily_food\", \"daily_sleep\", \"name\"],\r",
							"    \"properties\":{\r",
							"        \"age\": {\"type\": \"integer\"},\r",
							"        \"daily_food\": {\"type\": \"number\"},\r",
							"        \"daily_sleep\": {\"type\": \"number\"},\r",
							"        \"name\": {\"type\": \"string\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"2 Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"//3 В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент  'daily_food':weight * 0.012,'daily_sleep': weight * 2.5\r",
							"let req = request.data;\r",
							"let weight = parseInt(req.weight)\r",
							"\r",
							"pm.test(\"3.1 Check multiplier daily_food\", () => {\r",
							"    pm.expect(jsonData.daily_food).to.eql(weight * 0.012)});\r",
							"    \r",
							"pm.test(\"3.2 Check multiplier daily_sleep\", () => {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(weight * 2.5);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "2",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "3",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Peshenka",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/test_pet_info",
					"host": [
						"{{server}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5_get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"pm.test(\"1 Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"//2 Проверка структуры json в ответе\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"age\", \"family\", \"name\", \"salary\"],\r",
							"    \"properties\":{\r",
							"        \"age\": {\"type\": \"string\"},\r",
							"        \"family\":{\r",
							"            \"type\": \"object\",\r",
							"            \"required\": [\"children\", \"u_salary_1_5_year\"],\r",
							"            \"properties\":{\r",
							"                \"children\": {\"type\": \"array\"},\r",
							"                \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"            }\r",
							"        },\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\"type\": \"integer\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"2 Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//3 Проверить что значение поля name = значению переменной name из окружения\r",
							"let req = request.data;\r",
							"\r",
							"pm.test(\"3 Compare value name\", () => {\r",
							"    pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"//4 Проверить что значение поля age в ответе соответствует отправленному в запросе значению поля age\r",
							"pm.test(\"4 Compare value age\", () => {\r",
							"    pm.expect(jsonData.age).to.eql(req.age);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Guzel",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/get_test_user",
					"host": [
						"{{server}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1 Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"let min = 0;\r",
							"let max = jsonData.length //определяем длину массива\r",
							"curr_index = Math.floor(Math.random() * (max - min + 1)) + min;//получаем рандомное значение индекса массива\r",
							"curr_object = jsonData[curr_index];//получаем объект под данным индексом в массиве\r",
							"pm.environment.set(\"curr_code\", curr_object.Cur_ID);//передаем значение Cur_ID в окружение\r",
							"\r",
							"/* 2\r",
							"===============\r",
							"***\r",
							"1) получить список валют\r",
							"2) итерировать список валют\r",
							"3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты\r",
							"4) если возвращается 500 код, переходим к следующей итреации\r",
							"5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"6) если поле есть, пишем в консоль инфу про валюту в виде response\r",
							"7) переходим к следующей итерации\r",
							"*/\r",
							"\r",
							"let i = 0;\r",
							"while(i<jsonData.length){\r",
							"    let data = {\r",
							"        url: \"http://162.55.220.72:5005/curr_byn\",\r",
							"        method: \"POST\",\r",
							"        body: {\r",
							"          mode: 'formdata',\r",
							"          formdata: [\r",
							"            {key: \"auth_token\", value: pm.environment.get(\"token\"), disabled: false, description: {content:\"\", type:\"text/plain\"}},\r",
							"            {key: \"curr_code\", value: jsonData[i].Cur_ID, disabled: false, description: {content:\"\", type:\"text/plain\"}}\r",
							"        ]}\r",
							"    };\r",
							"    pm.sendRequest(data, function (err, res) {\r",
							"        if(res.code == 200 && res.json().hasOwnProperty(\"Cur_OfficialRate\")){\r",
							"            console.info(res.json());\r",
							"        }\r",
							"    });\r",
							"    i += 1;\r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/currency",
					"host": [
						"{{server}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7_curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Статус код 200\r",
							"pm.test(\"1 Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"//2 Проверка структуры json в ответе\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"recuired\": [\"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\",\"Cur_OfficialRate\", \"Cur_Scale\", \"Date\"],\r",
							"    \"properties\":{\r",
							"        \"Cur_Abbreviation\": {\"type\": \"string\"},\r",
							"        \"Cur_ID\": {\"type\": \"integer\"},\r",
							"        \"Cur_Name\": {\"type\": \"string\"},\r",
							"        \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
							"        \"Cur_Scale\": {\"type\": \"integer\"},\r",
							"        \"Date\": {\"type\": \"string\"}\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"2 Schema is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{cur_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server}}/curr_byn",
					"host": [
						"{{server}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}